<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zduiyl.github.io/</id>
    <title>Zduiy Blog</title>
    <updated>2021-04-13T12:57:36.216Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zduiyl.github.io/"/>
    <link rel="self" href="https://zduiyl.github.io/atom.xml"/>
    <logo>https://zduiyl.github.io/images/avatar.png</logo>
    <icon>https://zduiyl.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Zduiy Blog</rights>
    <entry>
        <title type="html"><![CDATA[Hadoop]]></title>
        <id>https://zduiyl.github.io/post/hadoop/</id>
        <link href="https://zduiyl.github.io/post/hadoop/">
        </link>
        <updated>2021-04-13T10:28:17.000Z</updated>
        <content type="html"><![CDATA[<p>Hadoop 的作用<br>
Hadoop 的作用非常简单，就是在多计算机集群环境中营造一个统一而稳定的存储和计算环境，并能为其他分布式应用服务提供平台支持。</p>
<p>也就是说， Hadoop 在某种程度上将多台计算机组织成了一台计算机（做同一件事），那么 HDFS 就相当于这台计算机的硬盘，而 MapReduce 就是这台计算机的 CPU 控制器。</p>
<p>https://www.runoob.com/w3cnote_genre/hadoop</p>
<p>图谱<br>
https://www.runoob.com/wp-content/uploads/2016/07/png-Hadoop-by-StuQ.png</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MapReduce]]></title>
        <id>https://zduiyl.github.io/post/mapreduce/</id>
        <link href="https://zduiyl.github.io/post/mapreduce/">
        </link>
        <updated>2021-04-13T08:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>MapReduce 既是一个编程模型，又是一个计算框架。</p>
<p>为什么说 MapReduce 是一种非常简单又非常强大的编程模型？<br>
简单在于其编程模型只包含 Map 和 Reduce 两个过程，map 的主要输入是一对 &lt;Key,<br>
Value&gt; 值，经过 map 计算后输出一对 &lt;Key, Value&gt; 值；然后将相同 Key 合并，形成<br>
&lt;Key, Value 集合 &gt;；再将这个 &lt;Key, Value 集合 &gt; 输入 reduce，经过计算输出零个或<br>
多个 &lt;Key, Value&gt; 对。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data]]></title>
        <id>https://zduiyl.github.io/post/data/</id>
        <link href="https://zduiyl.github.io/post/data/">
        </link>
        <updated>2021-04-13T08:37:37.000Z</updated>
        <content type="html"><![CDATA[<p>常用的保证系统可用性的策略有<strong>冗余备份、失效转移和降级限流</strong>。虽然这 3 种策略你可能早已耳熟能详，但还是有一些容易被忽略的地方。</p>
<p>比如<strong>冗余备份</strong>，任何程序、任何数据，都至少要有一个备份，也就是说程序至少要部署到两台服务器，数据至少要备份到另一台服务器上。此外，稍有规模的互联网企业都会建设多个数据中心，数据中心之间互相进行备份，用户请求可能会被分发到任何一个数据中心，即所谓的异地多活，在遭遇地域性的重大故障和自然灾害的时候，依然保证应用的高可用。</p>
<p>当要访问的程序或者数据无法访问时，需要将访问请求转移到备份的程序或者数据所在的服务器上，这也就是<strong>失效转移</strong>。失效转移你应该注意的是失效的鉴定，像 NameNode 这样主从服务器管理同一份数据的场景，如果从服务器错误地以为主服务器宕机而接管集群管理，会出现主从服务器一起对 DataNode 发送指令，进而导致集群混乱，也就是所谓的“脑裂”。这也是这类场景选举主服务器时，引入 ZooKeeper 的原因。ZooKeeper 的工作原理，我将会在后面专门分析。</p>
<p>当大量的用户请求或者数据处理请求到达的时候，由于计算资源有限，可能无法处理如此大量的请求，进而导致资源耗尽，系统崩溃。这种情况下，可以拒绝部分请求，即进行<strong>限流</strong>；也可以关闭部分功能，降低资源消耗，即进行<strong>降级</strong>。限流是互联网应用的常备功能，因为超出负载能力的访问流量在何时会突然到来，你根本无法预料，所以必须提前做好准备，当遇到突发高峰流量时，就可以立即启动限流。而降级通常是为可预知的场景准备的，比如电商的“双十一”促销，为了保障促销活动期间应用的核心功能能够正常运行，比如下单功能，可以对系统进行降级处理，关闭部分非重要功能，比如商品评价功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件系统]]></title>
        <id>https://zduiyl.github.io/post/wen-jian-xi-tong/</id>
        <link href="https://zduiyl.github.io/post/wen-jian-xi-tong/">
        </link>
        <updated>2021-04-13T08:27:20.000Z</updated>
        <summary type="html"><![CDATA[<p>GFS（Google 文件系统）<br>
HDFS</p>
<p>IPFS https://zhuanlan.zhihu.com/p/32615963</p>
<p>ext2 ： 早期linux中常用的文件系统<br>
ext3 ： ext2的升级版，带日志功能<br>
RAMFS ： 内存文件系统，速度很快<br>
NFS ： 网络文件系统，由SUN发明，主要用于远程文件共享<br>
MS-DOS ： MS-DOS文件系统<br>
VFAT ： Windows 95/98 操作系统采用的文件系统<br>
FAT ： Windows XP 操作系统采用的文件系统<br>
NTFS ： Windows NT/XP 操作系统采用的文件系统<br>
HPFS ： OS/2 操作系统采用的文件系统<br>
PROC : 虚拟的进程文件系统<br>
ISO9660 ： 大部分光盘所采用的文件系统<br>
ufsSun : OS 所采用的文件系统<br>
NCPFS ： Novell 服务器所采用的文件系统<br>
SMBFS ： Samba 的共享文件系统<br>
XFS ： 由SGI开发的先进的日志文件系统，支持超大容量文件<br>
JFS ：IBM的AIX使用的日志文件系统<br>
ReiserFS : 基于平衡树结构的文件系统<br>
udf: 可擦写的数据光盘文件系统<br>
<img src="https://zduiyl.github.io//post-images/1618304188292.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>GFS（Google 文件系统）<br>
HDFS</p>
<p>IPFS https://zhuanlan.zhihu.com/p/32615963</p>
<p>ext2 ： 早期linux中常用的文件系统<br>
ext3 ： ext2的升级版，带日志功能<br>
RAMFS ： 内存文件系统，速度很快<br>
NFS ： 网络文件系统，由SUN发明，主要用于远程文件共享<br>
MS-DOS ： MS-DOS文件系统<br>
VFAT ： Windows 95/98 操作系统采用的文件系统<br>
FAT ： Windows XP 操作系统采用的文件系统<br>
NTFS ： Windows NT/XP 操作系统采用的文件系统<br>
HPFS ： OS/2 操作系统采用的文件系统<br>
PROC : 虚拟的进程文件系统<br>
ISO9660 ： 大部分光盘所采用的文件系统<br>
ufsSun : OS 所采用的文件系统<br>
NCPFS ： Novell 服务器所采用的文件系统<br>
SMBFS ： Samba 的共享文件系统<br>
XFS ： 由SGI开发的先进的日志文件系统，支持超大容量文件<br>
JFS ：IBM的AIX使用的日志文件系统<br>
ReiserFS : 基于平衡树结构的文件系统<br>
udf: 可擦写的数据光盘文件系统<br>
<img src="https://zduiyl.github.io//post-images/1618304188292.jpg" alt="" loading="lazy"></p>
<!-- more -->
<p>Linux</p>
<p>ext2具有极快的速度和极小的CPU占用率，可用于硬盘和移动存储设备<br>
ext3增加日志功能，可回溯追踪<br>
ext4日志式文件系统，支持1EB（1024*1024TB），最大单文件16TB，支持连续写入可减少文件碎片。rhel6默认文件系统<br>
xfs可以管理500T的硬盘。rhel7默认文件系统<br>
brtfs文件系统针对固态盘做优化，<br>
zfs</p>
<p>windows</p>
<p>FAT16：MS—DOS和win95采用的磁盘分区格式，采用16位的文件分配表，只支持2GB的磁盘分区，最大单文件2GB，且磁盘利用率低<br>
FAT32：（即Vfat）采用32位的文件分配表，支持最大分区128GB，最大文件4GB<br>
NTFS：支持最大分区2TB，最大文件2TB，安全性和稳定性非常好，不易出现文件碎片。</p>
<p>Docker</p>
<p>首先应该想到的是 aufs，aufs 已经是比较古老的了。</p>
<p>实际上有以下集中类型可供使用。</p>
<p>存储驱动	支持的文件系统<br>
overlay, overlay2	xfs, ext4<br>
devicemapper	direct-lvm, loopback-lvm<br>
aufs	xfs, ext4<br>
btrfs	btrfs<br>
zfs	zfs<br>
vfs	其他文件系统<br>
关于各种存储驱动的应用场景，可以参考官方文档Suitability for your workload。<br>
注: aufs 在 Fedora、CentOS 上没有被支持。</p>
<p>docker 目前支持的联合文件系统种类包括AUFS、 btrfs、Device Mapper、 overlay 、 overlay2、vfs、zfs 等。多种文件系统目前的支持情况总结如下：<br>
AUFS: 最早支持的文件系统，对于Debian/Ubuntu 支持好，虽然没有合并到Linux内核中，但成熟度很高<br>
btrfs: 参考zfs等特性设计的文件系统，由Linux社区开发，视图未来取代Device Mapper,成熟度有待提高<br>
Device Mapper: RedHat 公司和Docker 团队一起开发用于支持RHEL的文件系统，内核支持，性能略慢，成熟度高<br>
overlay: 类似于AUFS的层次化文件系统，性能更好，从Linux 3.18 开始已经合并到内核，但成熟度有待提高<br>
overlay2: Docker 1.12 后推出，原生支持128层，效率比OverlayFS高，较新的版本Dokcer支持<br>
vfs: 基于普通文件系统（ext、nfs等）的中间层抽象，性能差，比较占用空间，成熟度也一般<br>
zfs: 最初设计为Solarias 10 上的写时文件系统，拥有不少好的特性，但对于linux 支持还不够成熟。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysqldump迁移数据]]></title>
        <id>https://zduiyl.github.io/post/mysqldump-qian-yi-shu-ju/</id>
        <link href="https://zduiyl.github.io/post/mysqldump-qian-yi-shu-ju/">
        </link>
        <updated>2021-03-24T11:26:53.000Z</updated>
        <content type="html"><![CDATA[<p>mysqldump -uroot -h主机地址 -P端口 -p &gt;/root/backup.sql</p>
<p>mysqldump -t hy_web -uroot1 -h1.1.1.36 --tables admin  &gt; /root/hyweb_v274.sql</p>
<h1 id="无改动或者可直接导入的表">无改动或者可直接导入的表</h1>
<p>mysqldump -t hy_web -uroot1 -h1.1.1.36 --tables act_category admin alarm_datas alarm_log alarm_rank_copy alarm_way attack_analyzed attack_datas_example attack_datas_searcher attack_datas_submeter attack_flow attack_source attack_source_mark attack_video big_screen_config data_report_email data_report_log decoy device_datastore device_maintain_log device_maintain_task elasticsearch_outage_recode elasticsearch_recode event_solution events_tags honeynets honeypot_policy honeypots honeypots_group honeyservers hy_tag ip2address key_behavior redeem_keys serial_number stats_account stats_attack_ip stats_m_account_event stats_m_account_service stats_m_attackip_account stats_m_attackip_event stats_m_attackip_sample stats_m_attackip_service stats_m_sample_event stats_m_sample_samplename stats_m_sample_service stats_m_samplename_attackip stats_m_samplename_event stats_m_samplename_service stats_m_service_event stats_sample stats_sample_name stats_service system_manage_host system_update tag tag_data temp threat_attackips threat_file_names threat_files threat_user_pwds threaten_task tpl_alarm_rank tpl_pots tpl_pots_servers tpl_servers tpl_tag trapnode_tasks trapnodes trapnodes_group trapnodes_group_info update_record user_ad_server user_alarm_way user_email_list user_feedback user_group user_import_user_pwd user_log user_login_exam user_policy user_sub verify_code version_log visit_white_list y_log_statistics &gt; /root/hyweb_v274.sql</p>
<h1 id="需手工录入数据的表">需手工录入数据的表</h1>
<p>alarm_rank alarm_white_list syslog_setting</p>
<h1 id="需修改语句再导入数据的表">需修改语句再导入数据的表</h1>
<p>mysqldump -t hy_web -uroot1 -h1.1.1.36 --tables user user_ad user_log user_setting &gt; /root/hyweb_v274.sql</p>
<h1 id="数据量大的表">数据量大的表</h1>
<p>mysqldump -t hy_web -uroot1 -h1.1.1.36 --tables events &gt; /root/hyweb_v274.sql<br>
mysqldump -t hy_web -uroot1 -h1.1.1.36 --tables tag_map &gt; /root/hyweb_v274.sql</p>
<h1 id="攻击数据分表">攻击数据分表</h1>
<p>mysqldump -t hy_web -uroot1 -h1.1.1.31 --ignore-table hy_web.act_category <br>
--ignore-table hy_web.admin <br>
--ignore-table hy_web.alarm_datas <br>
--ignore-table hy_web.alarm_log <br>
--ignore-table hy_web.alarm_rank_copy <br>
--ignore-table hy_web.alarm_way <br>
--ignore-table hy_web.attack_analyzed <br>
--ignore-table hy_web.attack_datas_example <br>
--ignore-table hy_web.attack_datas_searcher <br>
--ignore-table hy_web.attack_datas_submeter <br>
--ignore-table hy_web.attack_flow <br>
--ignore-table hy_web.attack_source <br>
--ignore-table hy_web.attack_source_mark <br>
--ignore-table hy_web.attack_video <br>
--ignore-table hy_web.big_screen_config <br>
--ignore-table hy_web.data_report_email <br>
--ignore-table hy_web.data_report_log <br>
--ignore-table hy_web.decoy <br>
--ignore-table hy_web.device_datastore <br>
--ignore-table hy_web.device_maintain_log <br>
--ignore-table hy_web.device_maintain_task <br>
--ignore-table hy_web.elasticsearch_outage_recode <br>
--ignore-table hy_web.elasticsearch_recode <br>
--ignore-table hy_web.event_solution <br>
--ignore-table hy_web.events_tags <br>
--ignore-table hy_web.honeynets <br>
--ignore-table hy_web.honeypot_policy <br>
--ignore-table hy_web.honeypots <br>
--ignore-table hy_web.honeypots_group <br>
--ignore-table hy_web.honeyservers <br>
--ignore-table hy_web.hy_tag <br>
--ignore-table hy_web.ip2address <br>
--ignore-table hy_web.key_behavior <br>
--ignore-table hy_web.redeem_keys <br>
--ignore-table hy_web.serial_number <br>
--ignore-table hy_web.stats_account <br>
--ignore-table hy_web.stats_attack_ip <br>
--ignore-table hy_web.stats_m_account_event <br>
--ignore-table hy_web.stats_m_account_service <br>
--ignore-table hy_web.stats_m_attackip_account <br>
--ignore-table hy_web.stats_m_attackip_event <br>
--ignore-table hy_web.stats_m_attackip_sample <br>
--ignore-table hy_web.stats_m_attackip_service <br>
--ignore-table hy_web.stats_m_sample_event <br>
--ignore-table hy_web.stats_m_sample_samplename <br>
--ignore-table hy_web.stats_m_sample_service <br>
--ignore-table hy_web.stats_m_samplename_attackip <br>
--ignore-table hy_web.stats_m_samplename_event <br>
--ignore-table hy_web.stats_m_samplename_service <br>
--ignore-table hy_web.stats_m_service_event <br>
--ignore-table hy_web.stats_sample <br>
--ignore-table hy_web.stats_sample_name <br>
--ignore-table hy_web.stats_service <br>
--ignore-table hy_web.system_manage_host <br>
--ignore-table hy_web.system_update <br>
--ignore-table hy_web.tag <br>
--ignore-table hy_web.tag_data <br>
--ignore-table hy_web.temp <br>
--ignore-table hy_web.threat_attackips <br>
--ignore-table hy_web.threat_file_names <br>
--ignore-table hy_web.threat_files <br>
--ignore-table hy_web.threat_user_pwds <br>
--ignore-table hy_web.threaten_task <br>
--ignore-table hy_web.tpl_alarm_rank <br>
--ignore-table hy_web.tpl_pots <br>
--ignore-table hy_web.tpl_pots_servers <br>
--ignore-table hy_web.tpl_servers <br>
--ignore-table hy_web.tpl_tag <br>
--ignore-table hy_web.trapnode_tasks <br>
--ignore-table hy_web.trapnodes <br>
--ignore-table hy_web.trapnodes_group <br>
--ignore-table hy_web.trapnodes_group_info <br>
--ignore-table hy_web.update_record <br>
--ignore-table hy_web.user_ad_server <br>
--ignore-table hy_web.user_alarm_way <br>
--ignore-table hy_web.user_email_list <br>
--ignore-table hy_web.user_feedback <br>
--ignore-table hy_web.user_group <br>
--ignore-table hy_web.user_import_user_pwd <br>
--ignore-table hy_web.user_log <br>
--ignore-table hy_web.user_login_exam <br>
--ignore-table hy_web.user_policy <br>
--ignore-table hy_web.user_sub <br>
--ignore-table hy_web.verify_code <br>
--ignore-table hy_web.version_log <br>
--ignore-table hy_web.visit_white_list <br>
--ignore-table hy_web.y_log_statistics <br>
--ignore-table hy_web.alarm_rank <br>
--ignore-table hy_web.alarm_white_list <br>
--ignore-table hy_web.syslog_setting <br>
--ignore-table hy_web.user <br>
--ignore-table hy_web.user_ad <br>
--ignore-table hy_web.user_log <br>
--ignore-table hy_web.user_setting <br>
--ignore-table hy_web.events <br>
--ignore-table hy_web.tag_map &gt; /root/hyweb_v274_attack_datas.sql</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Curl Http]]></title>
        <id>https://zduiyl.github.io/post/curl-http/</id>
        <link href="https://zduiyl.github.io/post/curl-http/">
        </link>
        <updated>2021-03-23T08:37:58.000Z</updated>
        <content type="html"><![CDATA[<p>前言：</p>
<p>测试中需要抓取http不同请求方法的包，get、post这类常见的方法随便访问网页就可以。</p>
<p>但如何发送http的其他请求方法呢，HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT</p>
<p>查询资料发现可以用curl实现</p>
<p>HTTP 请求方法<br>
HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p>
<p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>
<p>序号	方法	描述<br>
1	GET	请求指定的页面信息，并返回实体主体。<br>
2	HEAD	类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头<br>
3	POST	向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。<br>
4	PUT	从客户端向服务器传送的数据取代指定的文档的内容。<br>
5	DELETE	请求服务器删除指定的页面。<br>
6	CONNECT	HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>
7	OPTIONS	允许客户端查看服务器的性能。<br>
8	TRACE	回显服务器收到的请求，主要用于测试或诊断。<br>
9	PATCH	是对 PUT 方法的补充，用来对已知资源进行局部更新 。<br>
curl 命令的常用参数有：</p>
<p>-X <method> // 设置请求方法<br>
-H <header> // 设置请求头<br>
-D <data> // 设置请求数据（POST方法）<br>
1、使用curl发送head请求，使用参数：- I  或者 --head</p>
<p>$ curl -I https://www.example.com<br>
$ curl --head https://www.example.com<br>
2、使用curl发送PUT请求 -v是展示服务器的响应</p>
<p>curl -v -X PUT -d &quot;aaa&quot; http://10.16.191.147/wenjian/test.txt<br>
3、使用curl发送delete请求</p>
<p>curl -v -X DELETE http://10.16.191.147/wenjian/test.txt<br>
4、使用curl发送OPTIONS请求</p>
<p>curl  -v -X OPTIONS http://10.16.191.147/<br>
5、使用curl发送TRACE请求</p>
<p>curl  -v -X TRACE http://10.16.191.147/<br>
6、使用curl发送 CONNECT请求</p>
<p>curl  -v -X CONNECT http://10.16.191.147/<br>
 <br>
————————————————<br>
版权声明：本文为CSDN博主「新雪兰」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：https://blog.csdn.net/weixin_40748006/article/details/104812786</p>
<p>[root@localhost ~]# curl -v -X TRACE &quot;https://192.168.129.153:443/&quot; -k</p>
<ul>
<li>About to connect() to 192.168.129.153 port 443 (#0)</li>
<li>Trying 192.168.129.153...</li>
<li>Adding handle: conn: 0x2291e70</li>
<li>Adding handle: send: 0</li>
<li>Adding handle: recv: 0</li>
<li>Curl_addHandleToPipeline: length: 1</li>
<li>
<ul>
<li>Conn 0 (0x2291e70) send_pipe: 1, recv_pipe: 0</li>
</ul>
</li>
<li>Connected to 192.168.129.153 (192.168.129.153) port 443 (#0)</li>
<li>successfully set certificate verify locations:</li>
<li>CAfile: /etc/pki/tls/certs/ca-bundle.crt<br>
CApath: none</li>
<li>SSLv3, TLS Unknown, Unknown (22):</li>
<li>SSLv3, TLS handshake, Client hello (1):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Server hello (2):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, CERT (11):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Server key exchange (12):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Server finished (14):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Client key exchange (16):</li>
<li>SSLv2, Unknown (20):</li>
<li>SSLv3, TLS change cipher, Client hello (1):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Finished (20):</li>
<li>SSLv2, Unknown (20):</li>
<li>SSLv3, TLS change cipher, Client hello (1):</li>
<li>SSLv2, Unknown (22):</li>
<li>SSLv3, TLS handshake, Finished (20):</li>
<li>SSL connection using ECDHE-RSA-AES256-GCM-SHA384</li>
<li>Server certificate:</li>
<li>subject: C=CN; ST=Some-State; O=Jeeseen; OU=Jeeseen</li>
<li>start date: 2020-01-08 06:59:17 GMT</li>
<li>expire date: 2030-01-05 06:59:17 GMT</li>
<li>issuer: C=CN; ST=Some-State; O=Jeeseen; OU=Jeeseen</li>
<li>SSL certificate verify result: self signed certificate (18), continuing anyway.</li>
<li>SSLv2, Unknown (23):</li>
</ul>
<blockquote>
<p>TRACE / HTTP/1.1<br>
User-Agent: curl/7.30.0<br>
Host: 192.168.129.153<br>
Accept: <em>/</em></p>
</blockquote>
<ul>
<li>SSLv2, Unknown (23):<br>
&lt; HTTP/1.1 405 Method Not Allowed<br>
&lt; Date: Tue, 23 Mar 2021 08:42:35 GMT</li>
<li>Server Apache is not blacklisted<br>
&lt; Server: Apache<br>
&lt; Allow:<br>
&lt; Content-Length: 222<br>
&lt; Content-Type: text/html; charset=iso-8859-1<br>
&lt;</li>
</ul>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>405 Method Not Allowed</title>
</head><body>
<h1>Method Not Allowed</h1>
<p>The requested method TRACE is not allowed for this URL.</p>
</body></html>
* Connection #0 to host 192.168.129.153 left intact
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>https://zduiyl.github.io/post/git/</id>
        <link href="https://zduiyl.github.io/post/git/">
        </link>
        <updated>2021-03-22T03:16:35.000Z</updated>
        <content type="html"><![CDATA[<p>修改最近一次提交的message</p>
<p>git commit --amend</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[byte conversion]]></title>
        <id>https://zduiyl.github.io/post/byte-conversion/</id>
        <link href="https://zduiyl.github.io/post/byte-conversion/">
        </link>
        <updated>2021-03-16T02:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="单位转换">单位转换</h3>
<p>1Bytes = 8Bit<br>
1KB = 1024Bytes<br>
1MB = 1024KB<br>
1GB = 1024MB<br>
1TB = 1024GB</p>
<h3 id="bit存储数值范围">Bit存储数值范围</h3>
<p>8Bit   = 00000000<br>
存储范围：00000000 ~ 11111111<br>
十进制存储范围：0 ~ 2^8 = 0 ~ 256</p>
<p>16Bit = 0000000000000000<br>
存储范围：0000000000000000 ~ 1111111111111111<br>
十进制存储范围：0 ~ 2^16 = 0 ~ 65536</p>
<h3 id="常用int类型">常用int类型</h3>
<p>Go：uint8，uint16，uint32，uint64，int8，int16，int32，int64<br>
Python3：只有一种整数类型 int，表示为长整型，没有 python2 中的 Long<br>
Mysql：tinyint，smallint，mediumint，int，bigint</p>
<p>int8     = 8Bit   = 1Bytes<br>
int16   = 16Bit = 2Bytes<br>
int32   = 32Bit = 4Bytes<br>
int64   = 64Bit = 8Bytes</p>
<p>int32可存储十进制数范围：-2147483648，2147483647<br>
uint32表示无符号32位整型，可存储十进制数范围：0 ~ 4294967295</p>
<h3 id="常见场景">常见场景</h3>
<p>时间戳是int32<br>
ipv4是int32<br>
ipv6是int128</p>
<h3 id="拓展资料">拓展资料</h3>
<p><a href="https://blog.csdn.net/ZBylant/article/details/86572567">MySQL中 int(11)和int(10)有没有区别</a><br>
<a href="https://www.cnblogs.com/yrjns/p/11246163.html">位运算（&amp;、|、^、~、&gt;&gt;、&lt;&lt;）</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ProtoBuf(Protocol Buffer Languager)]]></title>
        <id>https://zduiyl.github.io/post/protocol-buffer-languager/</id>
        <link href="https://zduiyl.github.io/post/protocol-buffer-languager/">
        </link>
        <updated>2021-03-16T02:06:22.000Z</updated>
        <content type="html"><![CDATA[<p>protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于通信协议、数据存储等。</p>
<p><a href="https://developers.google.com/protocol-buffers/docs/proto3">官方文档</a></p>
<p><a href="https://www.jianshu.com/p/bdd94a32fbd1">翻译 ProtoBuf 官方文档（一）- 开发者指南</a></p>
<p><a href="https://www.jianshu.com/p/6f68fb2c7d19">翻译 ProtoBuf 官方文档（二）- 开发者指南</a></p>
<p><a href="https://www.jianshu.com/c/27e9d713f929">protobuf.js专题</a></p>
<p><a href="https://blog.csdn.net/HelloKitty520123/article/details/95618537">可变长度的编码方式 varint</a></p>
<br>
`文中摘抄`
## protocol buffers 是什么？
protocol buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小、更快、更为简单。你可以定义数据的结构，然后使用特殊生成的源代码轻松的在各种数据流中使用各种语言进行编写和读取结构数据。你甚至可以更新数据结构，而不破坏根据旧数据结构编译而成并且已部署的程序。
<h3 id="随着系统的发展它获得了许多其他功能和用途">随着系统的发展，它获得了许多其他功能和用途：</h3>
<p>1）自动生成的序列化和反序列化代码避免了手动解析的需要。<br>
2）除了用于短期 RPC（远程过程调用）请求之外，人们还开始使用 protocol buffers 作为一种方便的自描述格式，用于持久存储数据（例如在 Bigtable 中）。<br>
3）服务器 RPC 接口开始被声明为协议文件的一部分，protocol 编译器生成存根类，用户可以使用服务器接口的实际实现来覆盖这些类。</p>
<p>Protocol buffers 现在是 Google 的数据通用语言 - 在撰写本文时，Google 代码树中有 12183 个 .proto 文件，其中一共定义了 48162 种不同的 message 类型。它们既可用于 RPC 系统，也可用于各种存储系统中的数据持久存储。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Goland gRPC]]></title>
        <id>https://zduiyl.github.io/post/goland-grpc/</id>
        <link href="https://zduiyl.github.io/post/goland-grpc/">
        </link>
        <updated>2021-03-12T07:43:48.000Z</updated>
        <content type="html"><![CDATA[<p>protoc 编译工具<br>
https://www.cnblogs.com/huyuchengus/p/11235491.html</p>
<p>gRPC简单实现<br>
https://www.cnblogs.com/xujunkai/p/13378976.html</p>
<p>proto3语言指南<br>
https://www.jianshu.com/p/f6ff6381a81a</p>
<p>protoc -I ./ pb/helloworld.proto --go_out=plugins=grpc:./</p>
<p>protoc -I log/ log/pb/helloworld.proto --go_out=plugins=grpc:log</p>
<p>protoc -I log/ log/pb/operationLog.proto --go_out=plugins=grpc:log</p>
]]></content>
    </entry>
</feed>